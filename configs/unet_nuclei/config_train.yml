model:
  name: UNet3D
  # number of input channels to the model
  in_channels: 1
  # number of output channels: segmentation mask, 'thick' boundaries, 'inner' boundaries, 'outer' boundaries
  out_channels: 2
  # determines the order of operators in a single layer (crg - Conv3d+ReLU+GroupNorm)
  layer_order: gcr
  # initial number of feature maps
  f_maps: 16
  # number of groups in the groupnorm
  num_groups: 8
  # apply element-wise nn.Sigmoid after the final 1x1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: true
  is_segmentation: true
# loss function to be used during training
loss:
  name: BCEDiceLoss
optimizer:
  # initial learning rate
  learning_rate: 0.0001
  # weight decay
  weight_decay: 0.00001
# evaluation metric
eval_metric:
  name: DiceCoefficient
lr_scheduler:
  name: ReduceLROnPlateau
  # higher Dice is better
  mode: max
  factor: 0.5
  patience: 25
trainer:
  # higher Dice is better
  eval_score_higher_is_better: True
  # path to the checkpoint directory
  checkpoint_dir: '/g/hiiragi/Users/Vlad/image_segmentation/vlad-nuclei/experiments/final/unet_bce_dice_ab_nuclei_boundary_090121/'
  # path to latest checkpoint; if provided the training will be resumed from that checkpoint
  resume: null
  # how many iterations between validations
  validate_after_iters: 500
  # how many iterations between tensorboard logging
  log_after_iters: 100
  # max number of epochs
  epochs: 500
  # max number of iterations
  iters: 150000
loaders:
  # class of the HDF5 dataset
  dataset: StandardHDF5Dataset
  # batch dimension; if number of GPUs is N > 1, then a batch_size of N * batch_size will automatically be taken for DataParallel
  batch_size: 1
  # how many subprocesses to use for data loading
  num_workers: 4
  # path to the raw data within the H5
  raw_internal_path: raw
  # path to the the label data withtin the H5
  label_internal_path: label
  # path to the pixel-wise weight map withing the H5 if present
  weight_internal_path: null
  # configuration of the train loader
  train:
    # absolute paths to the training datasets; if a given path is a directory all H5 files ('*.h5', '*.hdf', '*.hdf5', '*.hd5')
    # inside this this directory will be included as well (non-recursively)
    file_paths:
      - 'TRAINING_DIR'

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      name: FilterSliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [40, 220, 220]
      # train stride between patches
      stride_shape: [10, 60, 60]
      # minimum volume of the labels in the patch
      threshold: 0.01
      # probability of accepting patches which do not fulfil the threshold criterion
      slack_acceptance: 0.01

    # data transformations/augmentations
    transformer:
      raw:
        - name: Standardize
        - name: RandomFlip
        - name: RandomRotate90
        - name: RandomRotate
          # rotate only in ZY plane due to anisotropy
          axes: [[2, 1]]
          angle_spectrum: 20
          mode: reflect
        - name: ElasticDeformation
          spline_order: 3
        - name: AdditiveGaussianNoise
        - name: AdditivePoissonNoise
        - name: ToTensor
          expand_dims: true
      label:
        - name: RandomFlip
        - name: RandomRotate90
        - name: RandomRotate
          # rotate only in ZY plane due to anisotropy
          axes: [[2, 1]]
          angle_spectrum: 20
          mode: reflect
        - name: ElasticDeformation
          spline_order: 0
        - name: BlobsWithBoundary
          mode: ['thick']
          blur: false
        - name: ToTensor
          expand_dims: false

  # configuration of the validation loaders
  val:
    # paths to the validation datasets; if a given path is a directory all H5 files ('*.h5', '*.hdf', '*.hdf5', '*.hd5')
    # inside this this directory will be included as well (non-recursively)
    file_paths:
      - 'VALIDATION_DIR'

    # SliceBuilder configuration
    slice_builder:
      name: FilterSliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [40, 220, 220]
      # train stride between patches
      stride_shape: [30, 200, 200]
      # minimum volume of the labels in the patch
      threshold: 0.01
      # probability of accepting patches which do not fulfil the threshold criterion
      slack_acceptance: 0.0

    transformer:
      raw:
        - name: Standardize
        - name: ToTensor
          expand_dims: true
      label:
        - name: BlobsWithBoundary
          mode: ['thick']
        - name: ToTensor
          expand_dims: false
