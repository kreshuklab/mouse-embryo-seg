model_path: 'CHECKPOINT_DIR/best_checkpoint.pytorch'
# model configuration
model:
  name: UNet3D
  # number of input channels to the model
  in_channels: 1
  # number of output channels
  out_channels: 2
  # determines the order of operators in a single layer (crg - Conv3d+ReLU+GroupNorm)
  layer_order: gcr
  # initial number of feature maps
  f_maps: 16
  # number of groups in the groupnorm
  num_groups: 8
  # apply element-wise nn.Sigmoid after the final 1x1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: true
  is_segmentation: true
# specify the test datasets
loaders:
  batch_size: 1
  # mirror pad the raw data for sharper prediction near the boundaries of the volume
  mirror_padding: [16, 32, 32]
  # path to the raw data within the H5
  raw_internal_path: raw
  # how many subprocesses to use for data loading
  num_workers: 4
  # test loaders configuration
  test:
    # paths to the test datasets; if a given path is a directory all H5 files ('*.h5', '*.hdf', '*.hdf5', '*.hd5')
    # inside this this directory will be included as well (non-recursively)
    file_paths:
      - 'DIR_WITH_NUCLEI_STACKS'

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      # SliceBuilder class
      name: SliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [80, 170, 170]
      # train stride between patches
      stride_shape: [40, 85, 85]

    transformer:
        raw:
          - name: Standardize
          - name: ToTensor
            expand_dims: true
